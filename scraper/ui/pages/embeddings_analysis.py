"""
P√°gina de UI para An√°lisis de Embeddings
"""
import streamlit as st
import json
from typing import Dict, Any, Optional
from ui.components.common import Card, Alert, Button, LoadingSpinner, DataDisplay, SelectBox
from services.embeddings_service import EmbeddingsService
from services.drive_service import DriveService
from repositories.mongo_repository import MongoRepository
from config import settings

class EmbeddingsAnalysisPage:
    """P√°gina para an√°lisis sem√°ntico con embeddings"""
    
    def __init__(self):
        self.embeddings_service = EmbeddingsService()
        self.drive_service = DriveService()
        self.mongo_repo = MongoRepository(
            uri=st.secrets["mongodb"]["uri"],
            db_name=st.secrets["mongodb"]["db"]
        )
        self._init_session_state()
    
    def _init_session_state(self):
        """Inicializa el estado de la sesi√≥n"""
        if "json_data" not in st.session_state:
            st.session_state.json_data = None
        if "analysis_result" not in st.session_state:
            st.session_state.analysis_result = None
    
    def render(self):
        """Renderiza la p√°gina completa"""
        st.title("üìä An√°lisis Sem√°ntico con Embeddings")
        st.markdown("### üîç Agrupaci√≥n sem√°ntica y generaci√≥n de √°rbol SEO")
        
        # Secci√≥n de carga de datos
        self._render_data_source_section()
        
        # Secci√≥n de par√°metros de agrupaci√≥n
        self._render_clustering_parameters()
        
        # Bot√≥n de ejecuci√≥n
        self._render_execution_section()
        
        # Mostrar resultados si existen
        if st.session_state.analysis_result:
            self._render_results_section()
    
    def _render_data_source_section(self):
        """Renderiza la secci√≥n de carga de datos"""
        st.markdown("#### üìÅ Fuente de Datos")
        
        source = st.radio(
            "Selecciona fuente del archivo:",
            ["Desde Drive", "Desde ordenador", "Desde MongoDB"],
            horizontal=True
        )
        
        if source == "Desde ordenador":
            self._handle_file_upload()
        elif source == "Desde Drive":
            self._handle_drive_source()
        elif source == "Desde MongoDB":
            self._handle_mongodb_source()
        
        # Mostrar estado de carga
        if st.session_state.json_data:
            keyword = self.embeddings_service.get_extracted_keyword(st.session_state.json_data)
            if keyword:
                Alert.success(f"Datos cargados - Keyword: {keyword}")
            else:
                Alert.success("Datos cargados correctamente")
    
    def _handle_file_upload(self):
        """Maneja la carga de archivo desde el ordenador"""
        uploaded_file = st.file_uploader("üìÅ Sube un archivo JSON", type=["json"])
        
        if uploaded_file:
            try:
                st.session_state.json_data = uploaded_file.read()
                Alert.success(f"‚úÖ Archivo {uploaded_file.name} cargado correctamente")
                st.rerun()
            except Exception as e:
                Alert.error(f"Error al cargar archivo: {str(e)}")
    
    def _handle_drive_source(self):
        """Maneja la carga desde Google Drive"""
        if "proyecto_id" not in st.session_state:
            Alert.warning("‚ö†Ô∏è Selecciona primero un proyecto en la barra lateral.")
            return
        
        try:
            folder_id = self.drive_service.get_or_create_folder(
                "scraper etiquetas google",
                st.session_state.proyecto_id
            )
            
            files = self.drive_service.list_json_files_in_folder(folder_id)
            
            if files:
                selected_file = st.selectbox("Selecciona archivo JSON:", list(files.keys()))
                
                if Button.primary("üìÇ Cargar archivo de Drive", icon="üì•"):
                    content = self.drive_service.get_file_content(files[selected_file])
                    st.session_state.json_data = content
                    Alert.success(f"‚úÖ Archivo {selected_file} cargado desde Drive")
                    st.rerun()
            else:
                Alert.warning("‚ö†Ô∏è No hay archivos JSON en esa carpeta")
                
        except Exception as e:
            Alert.error(f"Error al acceder a Drive: {str(e)}")
    
    def _handle_mongodb_source(self):
        """Maneja la carga desde MongoDB"""
        try:
            # Obtener documentos con campo 'busqueda'
            documents = self.mongo_repo.find_many(
                {},
                collection_name="hoteles",
                limit=100
            )
            
            # Filtrar documentos con campo busqueda
            docs_with_search = [
                doc for doc in documents 
                if doc.get("busqueda")
            ]
            
            if docs_with_search:
                # Crear opciones para el selector
                options = {
                    f"{doc.get('busqueda', 'Sin b√∫squeda')} - {doc.get('_id', '')}": doc
                    for doc in docs_with_search
                }
                
                selected_key = st.selectbox("Selecciona b√∫squeda:", list(options.keys()))
                
                if Button.primary("üìÇ Cargar desde MongoDB", icon="üì•"):
                    selected_doc = options[selected_key]
                    st.session_state.json_data = json.dumps(selected_doc).encode()
                    Alert.success(f"‚úÖ Documento MongoDB cargado: {selected_key}")
                    st.rerun()
            else:
                Alert.warning("‚ö†Ô∏è No hay documentos con campo 'busqueda' en MongoDB")
                
        except Exception as e:
            Alert.error(f"Error al acceder a MongoDB: {str(e)}")
    
    def _render_clustering_parameters(self):
        """Renderiza los par√°metros de agrupaci√≥n"""
        st.markdown("---")
        st.markdown("#### ‚öôÔ∏è Par√°metros de Agrupaci√≥n")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.session_state.n_clusters_h2 = st.slider(
                "üß† N√∫mero de cl√∫steres para H2",
                min_value=2,
                max_value=30,
                value=10,
                help="N√∫mero de grupos para agrupar t√≠tulos H2"
            )
            
            st.session_state.max_titles_h2 = st.slider(
                "üìÑ M√°ximo de t√≠tulos H2",
                min_value=100,
                max_value=1500,
                value=300,
                help="M√°ximo n√∫mero de t√≠tulos H2 a procesar"
            )
        
        with col2:
            st.session_state.n_clusters_h3 = st.slider(
                "üß† N√∫mero de cl√∫steres para H3",
                min_value=2,
                max_value=100,
                value=30,
                help="N√∫mero de grupos para agrupar t√≠tulos H3"
            )
            
            st.session_state.max_titles_h3 = st.slider(
                "üìÑ M√°ximo de t√≠tulos H3",
                min_value=100,
                max_value=3000,
                value=900,
                help="M√°ximo n√∫mero de t√≠tulos H3 a procesar"
            )
        
        # Modelo GPT
        st.markdown("#### ü§ñ Modelo de IA")
        st.session_state.model = st.selectbox(
            "Modelo GPT",
            settings.gpt_models,
            index=settings.gpt_models.index("chatgpt-4o-latest") if "chatgpt-4o-latest" in settings.gpt_models else 0,
            help="Modelo de IA para generar t√≠tulos representativos"
        )
    
    def _render_execution_section(self):
        """Renderiza la secci√≥n de ejecuci√≥n"""
        if Button.primary("üöÄ Ejecutar an√°lisis SEO", use_container_width=True):
            self._execute_analysis()
    
    def _execute_analysis(self):
        """Ejecuta el an√°lisis sem√°ntico"""
        if not st.session_state.json_data:
            Alert.error("‚ùå Debes cargar un archivo antes de continuar")
            return
        
        with LoadingSpinner.show("Analizando y generando estructura SEO..."):
            try:
                result = self.embeddings_service.analyze_and_group_titles(
                    data=st.session_state.json_data,
                    max_titles_h2=st.session_state.max_titles_h2,
                    max_titles_h3=st.session_state.max_titles_h3,
                    n_clusters_h2=st.session_state.n_clusters_h2,
                    n_clusters_h3=st.session_state.n_clusters_h3,
                    model=st.session_state.model
                )
                
                st.session_state.analysis_result = result
                Alert.success("‚úÖ √Årbol SEO generado exitosamente")
                st.rerun()
                
            except Exception as e:
                Alert.error(f"‚ùå Error durante el an√°lisis: {str(e)}")
    
    def _render_results_section(self):
        """Renderiza la secci√≥n de resultados"""
        st.markdown("---")
        st.markdown("### üìä Resultados del An√°lisis")
        
        result = st.session_state.analysis_result
        
        # Mostrar H1 generado
        Card.render(
            title="üè∑Ô∏è H1 Generado",
            content=f"# {result['title']}",
            icon="üéØ"
        )
        
        # Mostrar estructura JSON
        DataDisplay.json(
            result,
            title="Estructura SEO Completa",
            expanded=True
        )
        
        # Opciones de exportaci√≥n
        col1, col2, col3 = st.columns(3)
        
        with col1:
            self._render_download_button()
        
        with col2:
            self._render_drive_upload_button()
        
        with col3:
            if Button.secondary("Nuevo an√°lisis", icon="üîÑ"):
                st.session_state.analysis_result = None
                st.rerun()
        
        # Vista previa de la estructura
        self._render_structure_preview()
    
    def _render_download_button(self):
        """Renderiza el bot√≥n de descarga"""
        json_bytes = json.dumps(
            st.session_state.analysis_result,
            ensure_ascii=False,
            indent=2
        ).encode("utf-8")
        
        st.download_button(
            label="‚¨áÔ∏è Descargar JSON",
            data=json_bytes,
            file_name="arbol_seo.json",
            mime="application/json"
        )
    
    def _render_drive_upload_button(self):
        """Renderiza el bot√≥n de subida a Drive"""
        if Button.secondary("Subir a Drive", icon="‚òÅÔ∏è"):
            if "proyecto_id" not in st.session_state:
                Alert.warning("Selecciona un proyecto en la barra lateral")
                return
            
            try:
                # Preparar datos
                json_bytes = json.dumps(
                    st.session_state.analysis_result,
                    ensure_ascii=False,
                    indent=2
                ).encode("utf-8")
                
                # Obtener carpeta
                folder_id = self.drive_service.get_or_create_folder(
                    "arboles seo",
                    st.session_state.proyecto_id
                )
                
                # Subir archivo
                link = self.drive_service.upload_file(
                    "arbol_seo.json",
                    json_bytes,
                    folder_id
                )
                
                if link:
                    Alert.success(f"Archivo subido: [Ver en Drive]({link})")
                else:
                    Alert.error("Error al subir archivo")
                    
            except Exception as e:
                Alert.error(f"Error al subir a Drive: {str(e)}")
    
    def _render_structure_preview(self):
        """Renderiza una vista previa de la estructura SEO"""
        st.markdown("#### üå≤ Vista Previa del √Årbol SEO")
        
        result = st.session_state.analysis_result
        
        # Mostrar cada H2 con sus H3s
        for h2_item in result.get("H2", []):
            with st.expander(f"üìÇ {h2_item['titulo']}", expanded=True):
                h3_list = h2_item.get("H3", [])
                if h3_list:
                    for h3 in h3_list:
                        st.markdown(f"    ‚îî‚îÄ‚îÄ üìÑ {h3}")
                else:
                    st.caption("    ‚îî‚îÄ‚îÄ Sin H3s asociados")
        
        # Resumen estad√≠stico
        st.markdown("#### üìà Resumen Estad√≠stico")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Total H2", len(result.get("H2", [])))
        
        with col2:
            total_h3 = sum(len(h2.get("H3", [])) for h2 in result.get("H2", []))
            st.metric("Total H3", total_h3)
        
        with col3:
            avg_h3_per_h2 = total_h3 / len(result.get("H2", [])) if result.get("H2") else 0
            st.metric("Promedio H3 por H2", f"{avg_h3_per_h2:.1f}")
